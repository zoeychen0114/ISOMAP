from matplotlib import pyplot as plt
import numpy as np
import networkx as nx
np.set_printoptions(precision=2)
import scipy.sparse.linalg as ll
from scipy.io import loadmat

data = loadmat('isomap.mat')
images = data["images"].T;
m,n = np.shape(images);

D_temp = np.zeros((m,m))
#Euclidean distance
def eud_dist(i,j):
    return np.sqrt(np.sum((i-j)**2))

#Manhattan distance
def manh_dist(i,j):
    return np.sum(np.abs(i-j))

for i in range(m):
    for j in range(i,m):
        #Euclidean distance
        #D_temp[i,j] = eud_dist(images[i],images[j])
        #Manhattan distance
        D_temp[i,j] = manh_dist(images[i],images[j])
        D_temp[j,i] = D_temp[i,j]
        
A = np.zeros((m,m))
eps_threshold = 0
for i in range(m):
    D_sort = np.sort(D_temp[i,:])
    if D_sort[99] > eps_threshold:
        eps_threshold = D_sort[99]
    for j in range(i,m):
        if D_temp[i,j] <= eps_threshold:
            A[i,j] = D_temp[i,j]
            A[j,i] = D_temp[i,j]



for i in range(m):
    for j in range(i,m):
        if A[i,j] == 0:
            D_temp[i,j] = 999999
            D_temp[j,i] = 999999

plt.figure()
plt.imshow(A)   

def Matrix_D(W):
    # Generate Graph and Obtain Matrix D, \\
    # from weight matrix W defining the weight on the edge between each pair of nodes.
    # Note that you can assign sufficiently large weights to non-existing edges.

    n = np.shape(W)[0]
    Graph = nx.DiGraph()
    for i in range(n):
        for j in range(n):
            Graph.add_weighted_edges_from([(i,j,min(W[i,j], W[j,i]))])

    res = dict(nx.all_pairs_dijkstra_path_length(Graph))
    D = np.zeros([n,n])
    for i in range(n):
        for j in range(n):
            D[i,j] = res[i][j]
    np.savetxt('D.csv', D)
    return D
    
D = Matrix_D(D_temp)


plt.figure()
plt.imshow(D)

one_vector = np.reshape(np.ones(m),((m,1)))
H = np.eye(m) - 1/m*np.dot(one_vector, np.transpose(one_vector))
C = -1/2*H.dot(D**2).dot(H)
C = (C + C.T)/2

S,W = ll.eigs(C)
S = S.real
W = W.real
index = np.argsort(-S) 

Z = W[:,index[0:2]].dot(np.diag(np.sqrt(S[index[0:2]])))

plt.figure()
plt.scatter(Z[:,0], Z[:,1])
